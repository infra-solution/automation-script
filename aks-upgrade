param(
    [string]$ClusterName,
    [string]$ResourceGroupName,
    [string]$TargetVersion,
    [switch]$Force
)

# Function to ensure prerequisites
function Check-Prerequisites {
    Write-Host "Checking prerequisites..."
    $currentContext = kubectl config current-context
    if (-not $currentContext) {
        Write-Error "kubectl context is not set. Please configure kubectl to connect to your AKS cluster."
        exit 1
    }
    Write-Host "kubectl is configured for context: $currentContext"
}

# Function to cordon, drain, and delete nodes in a node pool
function Manage-NodePool {
    param (
        [string]$NodePoolName
    )

    # List all nodes in the node pool
    $nodes = kubectl get nodes -l agentpool=$NodePoolName -o name
    if (-not $nodes) {
        Write-Error "No nodes found in the node pool: $NodePoolName"
        exit 1
    }

    foreach ($node in $nodes) {
        Write-Host "Processing node: $node"

        # Cordon the node
        kubectl cordon $node
        if ($?) {
            Write-Host "Node cordoned successfully: $node"
        } else {
            Write-Error "Failed to cordon node: $node"
            exit 1
        }

        # Drain the node
        kubectl drain $node --ignore-daemonsets --delete-emptydir-data --force
        if ($?) {
            Write-Host "Node drained successfully: $node"
        } else {
            Write-Error "Failed to drain node: $node"
            exit 1
        }

        # Delete the node
        Write-Host "Deleting node: $node"
        az vm delete --name $node --yes --no-wait
        if ($?) {
            Write-Host "Node deleted successfully: $node"
        } else {
            Write-Error "Failed to delete node: $node"
            exit 1
        }
    }
}

# Function to clone node pool with the same configuration
function Clone-NodePool {
    param (
        [string]$NodePoolName,
        [string]$NewNodePoolName
    )

    # Fetch the configuration of the existing node pool
    Write-Host "Fetching current node pool configuration for: $NodePoolName"
    $nodePoolConfig = az aks nodepool show --resource-group $ResourceGroupName --cluster-name $ClusterName --name $NodePoolName

    $vmSize = $nodePoolConfig.vmSize
    $nodeCount = $nodePoolConfig.count
    $enableAutoScaler = $nodePoolConfig.enableAutoScaling
    $minNodeCount = $nodePoolConfig.minCount
    $maxNodeCount = $nodePoolConfig.maxCount
    $maxPods = $nodePoolConfig.maxPods
    $mode = $nodePoolConfig.mode

    Write-Host "Creating new node pool: $NewNodePoolName"
    az aks nodepool add `
        --resource-group $ResourceGroupName `
        --cluster-name $ClusterName `
        --name $NewNodePoolName `
        --node-count $nodeCount `
        --node-vm-size $vmSize `
        --enable-cluster-autoscaler $enableAutoScaler `
        --min-count $minNodeCount `
        --max-count $maxNodeCount `
        --max-pods $maxPods `
        --mode $mode `
        --no-wait
    if ($?) {
        Write-Host "Node pool created successfully: $NewNodePoolName"
    } else {
        Write-Error "Failed to create node pool: $NewNodePoolName"
        exit 1
    }
}

# Main script
function Upgrade-AKS {
    # Check prerequisites
    Check-Prerequisites

    # Set parameters interactively if not provided
    if (-not $ClusterName) {
        $ClusterName = Read-Host "Enter the AKS cluster name"
    }
    if (-not $ResourceGroupName) {
        $ResourceGroupName = Read-Host "Enter the resource group name"
    }
    if (-not $TargetVersion) {
        Write-Host "Fetching available versions..."
        $availableVersions = az aks get-upgrades --resource-group $ResourceGroupName --name $ClusterName --query "controlPlaneProfile.upgrades[].kubernetesVersion" -o tsv
        Write-Host "Available versions: $availableVersions"
        $TargetVersion = Read-Host "Enter the Kubernetes version to upgrade to"
    }

    # Confirmation
    if (-not $Force) {
        $confirmation = Read-Host "Have you verified prerequisites like IP availability, PDBs, and quota limits? (yes/no)"
        if ($confirmation -ne "yes") {
            Write-Error "Please verify prerequisites before proceeding."
            exit 1
        }
    }

    # Upgrade control plane
    Write-Host "Upgrading control plane to version $TargetVersion..."
    az aks upgrade --resource-group $ResourceGroupName --name $ClusterName --kubernetes-version $TargetVersion --control-plane-only --yes
    if ($?) {
        Write-Host "Control plane upgraded successfully."
    } else {
        Write-Error "Failed to upgrade the control plane."
        exit 1
    }

    # Upgrade node pools
    Write-Host "Fetching node pools for cluster: $ClusterName..."
    $nodePools = az aks nodepool list --resource-group $ResourceGroupName --cluster-name $ClusterName --query "[].name" -o tsv
    foreach ($nodePool in $nodePools) {
        Write-Host "Processing node pool: $nodePool"

        # Generate new node pool name
        $mode = az aks nodepool show --resource-group $ResourceGroupName --cluster-name $ClusterName --name $nodePool --query "mode" -o tsv
        $newNodePoolName = "${mode}pool-${TargetVersion.Replace('.', '')}"

        # Create a new node pool with the same configuration
        Clone-NodePool -NodePoolName $nodePool -NewNodePoolName $newNodePoolName

        # Wait for new node pool creation
        Write-Host "Waiting for new node pool creation..."
        Start-Sleep -Seconds 30

        # Migrate workloads from old node pool
        Manage-NodePool -NodePoolName $nodePool

        # Delete the old node pool
        Write-Host "Deleting old node pool: $nodePool"
        az aks nodepool delete --resource-group $ResourceGroupName --cluster-name $ClusterName --name $nodePool --yes
    }

    Write-Host "AKS cluster upgrade completed successfully."
}

# Run the upgrade function
Upgrade-AKS
